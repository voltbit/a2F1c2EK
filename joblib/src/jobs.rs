// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `jobs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct DatasetIngestionJobRequest {
    // message fields
    pub job_id: ::std::string::String,
    pub userID: ::std::string::String,
    pub urgency: bool,
    pub protocol: DataProtocol,
    pub query: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatasetIngestionJobRequest {
    fn default() -> &'a DatasetIngestionJobRequest {
        <DatasetIngestionJobRequest as ::protobuf::Message>::default_instance()
    }
}

impl DatasetIngestionJobRequest {
    pub fn new() -> DatasetIngestionJobRequest {
        ::std::default::Default::default()
    }

    // string job_id = 1;


    pub fn get_job_id(&self) -> &str {
        &self.job_id
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: ::std::string::String) {
        self.job_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut ::std::string::String {
        &mut self.job_id
    }

    // Take field
    pub fn take_job_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.job_id, ::std::string::String::new())
    }

    // string userID = 2;


    pub fn get_userID(&self) -> &str {
        &self.userID
    }
    pub fn clear_userID(&mut self) {
        self.userID.clear();
    }

    // Param is passed by value, moved
    pub fn set_userID(&mut self, v: ::std::string::String) {
        self.userID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userID(&mut self) -> &mut ::std::string::String {
        &mut self.userID
    }

    // Take field
    pub fn take_userID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.userID, ::std::string::String::new())
    }

    // bool urgency = 3;


    pub fn get_urgency(&self) -> bool {
        self.urgency
    }
    pub fn clear_urgency(&mut self) {
        self.urgency = false;
    }

    // Param is passed by value, moved
    pub fn set_urgency(&mut self, v: bool) {
        self.urgency = v;
    }

    // .DataProtocol protocol = 4;


    pub fn get_protocol(&self) -> DataProtocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = DataProtocol::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: DataProtocol) {
        self.protocol = v;
    }

    // string query = 5;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DatasetIngestionJobRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.job_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.userID)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.urgency = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        if !self.userID.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.userID);
        }
        if self.urgency != false {
            my_size += 2;
        }
        if self.protocol != DataProtocol::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(4, self.protocol);
        }
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.query);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        if !self.userID.is_empty() {
            os.write_string(2, &self.userID)?;
        }
        if self.urgency != false {
            os.write_bool(3, self.urgency)?;
        }
        if self.protocol != DataProtocol::UNDEFINED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        if !self.query.is_empty() {
            os.write_string(5, &self.query)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatasetIngestionJobRequest {
        DatasetIngestionJobRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "job_id",
                |m: &DatasetIngestionJobRequest| { &m.job_id },
                |m: &mut DatasetIngestionJobRequest| { &mut m.job_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "userID",
                |m: &DatasetIngestionJobRequest| { &m.userID },
                |m: &mut DatasetIngestionJobRequest| { &mut m.userID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "urgency",
                |m: &DatasetIngestionJobRequest| { &m.urgency },
                |m: &mut DatasetIngestionJobRequest| { &mut m.urgency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DataProtocol>>(
                "protocol",
                |m: &DatasetIngestionJobRequest| { &m.protocol },
                |m: &mut DatasetIngestionJobRequest| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "query",
                |m: &DatasetIngestionJobRequest| { &m.query },
                |m: &mut DatasetIngestionJobRequest| { &mut m.query },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatasetIngestionJobRequest>(
                "DatasetIngestionJobRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DatasetIngestionJobRequest {
        static instance: ::protobuf::rt::LazyV2<DatasetIngestionJobRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DatasetIngestionJobRequest::new)
    }
}

impl ::protobuf::Clear for DatasetIngestionJobRequest {
    fn clear(&mut self) {
        self.job_id.clear();
        self.userID.clear();
        self.urgency = false;
        self.protocol = DataProtocol::UNDEFINED;
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatasetIngestionJobRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatasetIngestionJobRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatasetIngestionJobResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatasetIngestionJobResponse {
    fn default() -> &'a DatasetIngestionJobResponse {
        <DatasetIngestionJobResponse as ::protobuf::Message>::default_instance()
    }
}

impl DatasetIngestionJobResponse {
    pub fn new() -> DatasetIngestionJobResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DatasetIngestionJobResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatasetIngestionJobResponse {
        DatasetIngestionJobResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatasetIngestionJobResponse>(
                "DatasetIngestionJobResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DatasetIngestionJobResponse {
        static instance: ::protobuf::rt::LazyV2<DatasetIngestionJobResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DatasetIngestionJobResponse::new)
    }
}

impl ::protobuf::Clear for DatasetIngestionJobResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatasetIngestionJobResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatasetIngestionJobResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatasetIngestionJobStatusRequest {
    // message fields
    pub job_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatasetIngestionJobStatusRequest {
    fn default() -> &'a DatasetIngestionJobStatusRequest {
        <DatasetIngestionJobStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl DatasetIngestionJobStatusRequest {
    pub fn new() -> DatasetIngestionJobStatusRequest {
        ::std::default::Default::default()
    }

    // string job_id = 1;


    pub fn get_job_id(&self) -> &str {
        &self.job_id
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: ::std::string::String) {
        self.job_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut ::std::string::String {
        &mut self.job_id
    }

    // Take field
    pub fn take_job_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.job_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DatasetIngestionJobStatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.job_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatasetIngestionJobStatusRequest {
        DatasetIngestionJobStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "job_id",
                |m: &DatasetIngestionJobStatusRequest| { &m.job_id },
                |m: &mut DatasetIngestionJobStatusRequest| { &mut m.job_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatasetIngestionJobStatusRequest>(
                "DatasetIngestionJobStatusRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DatasetIngestionJobStatusRequest {
        static instance: ::protobuf::rt::LazyV2<DatasetIngestionJobStatusRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DatasetIngestionJobStatusRequest::new)
    }
}

impl ::protobuf::Clear for DatasetIngestionJobStatusRequest {
    fn clear(&mut self) {
        self.job_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatasetIngestionJobStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatasetIngestionJobStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatasetIngestionJobStatusResponse {
    // message fields
    pub job_status: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatasetIngestionJobStatusResponse {
    fn default() -> &'a DatasetIngestionJobStatusResponse {
        <DatasetIngestionJobStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl DatasetIngestionJobStatusResponse {
    pub fn new() -> DatasetIngestionJobStatusResponse {
        ::std::default::Default::default()
    }

    // string job_status = 1;


    pub fn get_job_status(&self) -> &str {
        &self.job_status
    }
    pub fn clear_job_status(&mut self) {
        self.job_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_job_status(&mut self, v: ::std::string::String) {
        self.job_status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_status(&mut self) -> &mut ::std::string::String {
        &mut self.job_status
    }

    // Take field
    pub fn take_job_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.job_status, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DatasetIngestionJobStatusResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.job_status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.job_status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.job_status.is_empty() {
            os.write_string(1, &self.job_status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatasetIngestionJobStatusResponse {
        DatasetIngestionJobStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "job_status",
                |m: &DatasetIngestionJobStatusResponse| { &m.job_status },
                |m: &mut DatasetIngestionJobStatusResponse| { &mut m.job_status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatasetIngestionJobStatusResponse>(
                "DatasetIngestionJobStatusResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DatasetIngestionJobStatusResponse {
        static instance: ::protobuf::rt::LazyV2<DatasetIngestionJobStatusResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DatasetIngestionJobStatusResponse::new)
    }
}

impl ::protobuf::Clear for DatasetIngestionJobStatusResponse {
    fn clear(&mut self) {
        self.job_status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatasetIngestionJobStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatasetIngestionJobStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatasetIngestionResultRequest {
    // message fields
    pub result_id: ::std::string::String,
    pub job_id: ::std::string::String,
    pub status: IngestionStatus,
    pub dataset: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatasetIngestionResultRequest {
    fn default() -> &'a DatasetIngestionResultRequest {
        <DatasetIngestionResultRequest as ::protobuf::Message>::default_instance()
    }
}

impl DatasetIngestionResultRequest {
    pub fn new() -> DatasetIngestionResultRequest {
        ::std::default::Default::default()
    }

    // string result_id = 1;


    pub fn get_result_id(&self) -> &str {
        &self.result_id
    }
    pub fn clear_result_id(&mut self) {
        self.result_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_id(&mut self, v: ::std::string::String) {
        self.result_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_id(&mut self) -> &mut ::std::string::String {
        &mut self.result_id
    }

    // Take field
    pub fn take_result_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_id, ::std::string::String::new())
    }

    // string job_id = 2;


    pub fn get_job_id(&self) -> &str {
        &self.job_id
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: ::std::string::String) {
        self.job_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut ::std::string::String {
        &mut self.job_id
    }

    // Take field
    pub fn take_job_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.job_id, ::std::string::String::new())
    }

    // .IngestionStatus status = 3;


    pub fn get_status(&self) -> IngestionStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = IngestionStatus::PENDING;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: IngestionStatus) {
        self.status = v;
    }

    // string dataset = 4;


    pub fn get_dataset(&self) -> &str {
        &self.dataset
    }
    pub fn clear_dataset(&mut self) {
        self.dataset.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataset(&mut self, v: ::std::string::String) {
        self.dataset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataset(&mut self) -> &mut ::std::string::String {
        &mut self.dataset
    }

    // Take field
    pub fn take_dataset(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dataset, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DatasetIngestionResultRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.job_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dataset)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.result_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.result_id);
        }
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.job_id);
        }
        if self.status != IngestionStatus::PENDING {
            my_size += ::protobuf::rt::enum_size(3, self.status);
        }
        if !self.dataset.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.dataset);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.result_id.is_empty() {
            os.write_string(1, &self.result_id)?;
        }
        if !self.job_id.is_empty() {
            os.write_string(2, &self.job_id)?;
        }
        if self.status != IngestionStatus::PENDING {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.dataset.is_empty() {
            os.write_string(4, &self.dataset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatasetIngestionResultRequest {
        DatasetIngestionResultRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "result_id",
                |m: &DatasetIngestionResultRequest| { &m.result_id },
                |m: &mut DatasetIngestionResultRequest| { &mut m.result_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "job_id",
                |m: &DatasetIngestionResultRequest| { &m.job_id },
                |m: &mut DatasetIngestionResultRequest| { &mut m.job_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<IngestionStatus>>(
                "status",
                |m: &DatasetIngestionResultRequest| { &m.status },
                |m: &mut DatasetIngestionResultRequest| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dataset",
                |m: &DatasetIngestionResultRequest| { &m.dataset },
                |m: &mut DatasetIngestionResultRequest| { &mut m.dataset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatasetIngestionResultRequest>(
                "DatasetIngestionResultRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DatasetIngestionResultRequest {
        static instance: ::protobuf::rt::LazyV2<DatasetIngestionResultRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DatasetIngestionResultRequest::new)
    }
}

impl ::protobuf::Clear for DatasetIngestionResultRequest {
    fn clear(&mut self) {
        self.result_id.clear();
        self.job_id.clear();
        self.status = IngestionStatus::PENDING;
        self.dataset.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatasetIngestionResultRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatasetIngestionResultRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatasetIngestionResultResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatasetIngestionResultResponse {
    fn default() -> &'a DatasetIngestionResultResponse {
        <DatasetIngestionResultResponse as ::protobuf::Message>::default_instance()
    }
}

impl DatasetIngestionResultResponse {
    pub fn new() -> DatasetIngestionResultResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DatasetIngestionResultResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatasetIngestionResultResponse {
        DatasetIngestionResultResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatasetIngestionResultResponse>(
                "DatasetIngestionResultResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DatasetIngestionResultResponse {
        static instance: ::protobuf::rt::LazyV2<DatasetIngestionResultResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DatasetIngestionResultResponse::new)
    }
}

impl ::protobuf::Clear for DatasetIngestionResultResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatasetIngestionResultResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatasetIngestionResultResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobDatasetRequest {
    // message fields
    pub job_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobDatasetRequest {
    fn default() -> &'a JobDatasetRequest {
        <JobDatasetRequest as ::protobuf::Message>::default_instance()
    }
}

impl JobDatasetRequest {
    pub fn new() -> JobDatasetRequest {
        ::std::default::Default::default()
    }

    // string job_id = 1;


    pub fn get_job_id(&self) -> &str {
        &self.job_id
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: ::std::string::String) {
        self.job_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut ::std::string::String {
        &mut self.job_id
    }

    // Take field
    pub fn take_job_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.job_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for JobDatasetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.job_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobDatasetRequest {
        JobDatasetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "job_id",
                |m: &JobDatasetRequest| { &m.job_id },
                |m: &mut JobDatasetRequest| { &mut m.job_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<JobDatasetRequest>(
                "JobDatasetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static JobDatasetRequest {
        static instance: ::protobuf::rt::LazyV2<JobDatasetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(JobDatasetRequest::new)
    }
}

impl ::protobuf::Clear for JobDatasetRequest {
    fn clear(&mut self) {
        self.job_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobDatasetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobDatasetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobDatasetResponse {
    // message fields
    pub dataset: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobDatasetResponse {
    fn default() -> &'a JobDatasetResponse {
        <JobDatasetResponse as ::protobuf::Message>::default_instance()
    }
}

impl JobDatasetResponse {
    pub fn new() -> JobDatasetResponse {
        ::std::default::Default::default()
    }

    // string dataset = 1;


    pub fn get_dataset(&self) -> &str {
        &self.dataset
    }
    pub fn clear_dataset(&mut self) {
        self.dataset.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataset(&mut self, v: ::std::string::String) {
        self.dataset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataset(&mut self) -> &mut ::std::string::String {
        &mut self.dataset
    }

    // Take field
    pub fn take_dataset(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dataset, ::std::string::String::new())
    }
}

impl ::protobuf::Message for JobDatasetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dataset)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dataset.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dataset);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dataset.is_empty() {
            os.write_string(1, &self.dataset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobDatasetResponse {
        JobDatasetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dataset",
                |m: &JobDatasetResponse| { &m.dataset },
                |m: &mut JobDatasetResponse| { &mut m.dataset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<JobDatasetResponse>(
                "JobDatasetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static JobDatasetResponse {
        static instance: ::protobuf::rt::LazyV2<JobDatasetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(JobDatasetResponse::new)
    }
}

impl ::protobuf::Clear for JobDatasetResponse {
    fn clear(&mut self) {
        self.dataset.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobDatasetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobDatasetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DataProtocol {
    UNDEFINED = 0,
    JDBC = 1,
    ODBC = 2,
    S3 = 3,
    LOOKER = 4,
}

impl ::protobuf::ProtobufEnum for DataProtocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataProtocol> {
        match value {
            0 => ::std::option::Option::Some(DataProtocol::UNDEFINED),
            1 => ::std::option::Option::Some(DataProtocol::JDBC),
            2 => ::std::option::Option::Some(DataProtocol::ODBC),
            3 => ::std::option::Option::Some(DataProtocol::S3),
            4 => ::std::option::Option::Some(DataProtocol::LOOKER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DataProtocol] = &[
            DataProtocol::UNDEFINED,
            DataProtocol::JDBC,
            DataProtocol::ODBC,
            DataProtocol::S3,
            DataProtocol::LOOKER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DataProtocol>("DataProtocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DataProtocol {
}

impl ::std::default::Default for DataProtocol {
    fn default() -> Self {
        DataProtocol::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for DataProtocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum IngestionStatus {
    PENDING = 0,
    SUCCESSFUL = 1,
    FAILED = 2,
}

impl ::protobuf::ProtobufEnum for IngestionStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IngestionStatus> {
        match value {
            0 => ::std::option::Option::Some(IngestionStatus::PENDING),
            1 => ::std::option::Option::Some(IngestionStatus::SUCCESSFUL),
            2 => ::std::option::Option::Some(IngestionStatus::FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [IngestionStatus] = &[
            IngestionStatus::PENDING,
            IngestionStatus::SUCCESSFUL,
            IngestionStatus::FAILED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<IngestionStatus>("IngestionStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for IngestionStatus {
}

impl ::std::default::Default for IngestionStatus {
    fn default() -> Self {
        IngestionStatus::PENDING
    }
}

impl ::protobuf::reflect::ProtobufValue for IngestionStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\njobs.proto\"\xa6\x01\n\x1aDatasetIngestionJobRequest\x12\x15\n\x06jo\
    b_id\x18\x01\x20\x01(\tR\x05jobId\x12\x16\n\x06userID\x18\x02\x20\x01(\t\
    R\x06userID\x12\x18\n\x07urgency\x18\x03\x20\x01(\x08R\x07urgency\x12)\n\
    \x08protocol\x18\x04\x20\x01(\x0e2\r.DataProtocolR\x08protocol\x12\x14\n\
    \x05query\x18\x05\x20\x01(\tR\x05query\"\x1d\n\x1bDatasetIngestionJobRes\
    ponse\"9\n\x20DatasetIngestionJobStatusRequest\x12\x15\n\x06job_id\x18\
    \x01\x20\x01(\tR\x05jobId\"B\n!DatasetIngestionJobStatusResponse\x12\x1d\
    \n\njob_status\x18\x01\x20\x01(\tR\tjobStatus\"\x97\x01\n\x1dDatasetInge\
    stionResultRequest\x12\x1b\n\tresult_id\x18\x01\x20\x01(\tR\x08resultId\
    \x12\x15\n\x06job_id\x18\x02\x20\x01(\tR\x05jobId\x12(\n\x06status\x18\
    \x03\x20\x01(\x0e2\x10.IngestionStatusR\x06status\x12\x18\n\x07dataset\
    \x18\x04\x20\x01(\tR\x07dataset\"\x20\n\x1eDatasetIngestionResultRespons\
    e\"*\n\x11JobDatasetRequest\x12\x15\n\x06job_id\x18\x01\x20\x01(\tR\x05j\
    obId\".\n\x12JobDatasetResponse\x12\x18\n\x07dataset\x18\x01\x20\x01(\tR\
    \x07dataset*E\n\x0cDataProtocol\x12\r\n\tUNDEFINED\x10\0\x12\x08\n\x04JD\
    BC\x10\x01\x12\x08\n\x04ODBC\x10\x02\x12\x06\n\x02S3\x10\x03\x12\n\n\x06\
    LOOKER\x10\x04*:\n\x0fIngestionStatus\x12\x0b\n\x07PENDING\x10\0\x12\x0e\
    \n\nSUCCESSFUL\x10\x01\x12\n\n\x06FAILED\x10\x022\xcd\x02\n\nJobManager\
    \x12O\n\x12CreateIngestionJob\x12\x1b.DatasetIngestionJobRequest\x1a\x1c\
    .DatasetIngestionJobResponse\x12Y\n\x10ReadIngestionJob\x12!.DatasetInge\
    stionJobStatusRequest\x1a\".DatasetIngestionJobStatusResponse\x12X\n\x15\
    CreateIngestionResult\x12\x1e.DatasetIngestionResultRequest\x1a\x1f.Data\
    setIngestionResultResponse\x129\n\x0eReadJobDataset\x12\x12.JobDatasetRe\
    quest\x1a\x13.JobDatasetResponseB\x07Z\x05jobpbb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
